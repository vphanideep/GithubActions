name: spalsh
on:
  workflow_dispatch:
jobs:
  Pre_deploymentChecks:
    name: Pre-deploymentChecks
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3.5.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: "echo 'Stage: Pre-deploymentChecks Started'\n                 \n    \n                    //Process Checkout of Develop Branch\n                    checkout([$class: 'GitSCM',\n                              branches: [[name: ('*/main')]],\n                              doGenerateSubmoduleConfigurations: false, \n                              extensions: [[$class: 'CleanBeforeCheckout']], \n                              submoduleCfg: [], \n                              userRemoteConfigs: [[credentialsId: 'githubcred', \n                              url: \"$repoURL\"]]])\n                    //show checkout directories\n                    echo 'checked out code under dir:'; sh(script:'pwd');\n                    echo 'Files present here: '; sh(script:'ls -lstr')\n                    \n                    //Load environment variables\n                    //load \"${{ github.workspace }}/splashBuildTools/Jenkins/jenkins_config\"\n                    \n                    deployScript = \"${{ env.WORKSPACE }}/scripttest.sh\"\n                    echo \"$deployScript\"\n                    buildUserName = \"Jenkins - Automatic\"\n\n                    //Parse Out Pipeline Invoker \n                    /* wrap([$class: 'BuildUser']) {\n                        if (env.BUILD_USER_ID && env.BUILD_USER && env.BUILD_USER_EMAIL) {\n                            userDetails = \"Invoked by ${{ env.BUILD_USER_ID }} (${{ env.BUILD_USER }}) - ${{ env.BUILD_USER_EMAIL }}\"\n                            buildUserName = sh(returnStdout:true, script:\"echo ${{ env.BUILD_USER }}\" )\n                        }\n                        else {\n                            userDetails = \"Invoked by Scheduled Jenkins Automatic job\"\n                            buildUserName = \"Jenkins - Automatic\"\n                        }\n                    } */\n                    \n                    \n                    \n                    //Change file permissions of the Build/Deploy script\n                    retStatus = sh(returnStatus: true, script: \"chmod 755 $deployScript\")\n                    \n                    //output log file creation\n                    env.OUTPUTLOG = sh(script: \"echo ${{ env.OUTPUTLOG_PATH }}/mtp_deploy_`date +%Y%m%d_%H%M%S`.log\", returnStdout: true).trim()\n                    \n                    //create list of target servers\n                    serverList = sh(script: \"echo ${{ inputs.TARGET_SERVERS }}\", returnStdout: true).trim().split(',');\n                    echo \"svrList: $serverList  & log : $OUTPUTLOG\"\n                    \n                    table_style = \" border=1 style='padding-left:5px;padding-right:5px;table-layout:fixed;border-collapse:collapse;width:80%;cellpadding:1;cellspacing:1;align:center;'\"\n                    //create list of target environments\n                    envList = sh(script: \"echo ${{ inputs.TARGET_ENV }}\", returnStdout: true).trim();\n                    def totalEnvList = []\n                    totalEnvList = sh(script: \"echo ${{ inputs.TARGET_ENV }}\", returnStdout: true).trim().split(',');\n                    thisEnvName = sh(script: \"echo ${{ env.ist }}\", returnStdout: true).trim().split(',')[0]\n                    \n                    echo \"curr env: $thisEnvName\"\n                    if (totalEnvList.size() == 1){                \n                        //same environment for all the servers ( env == 1 & servers > 1)\n                        for ( counter = 1; counter < serverList.size(); counter++ ) {\n                            envList  += \",\" + thisEnvName\n                        }\n                    }\n                    echo \"env List of corresponding servers: $envList\"\n                    \n                    echo 'Stage: Pre-deploymentChecks Finished'"
  Deployment:
    runs-on: ubuntu-latest
    needs: Pre_deploymentChecks
    steps:
    - name: checkout
      uses: actions/checkout@v3.5.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: "echo 'Stage: Deployment Started'\n                    deployMsgStatus = \"<br><table\" + table_style + \"><tr><td colspan='2'><b> === Deployment stage : server wise === </b></td></tr>\" + \"<tr><td> Env - Server</td><td>Status</td></tr>\"\n                    def envCounter = 0\n                    def currEnv = \"\"\n                    def deployStats = -1\n                    \n                     //Change file permissions of the Build/Deploy script\n                   \n                    sshagent(['splashuser']) {\n                        //Deploy the specified package to the Environment                        \n                        \n                        for ( def tgtServer in serverList ) {\n                            currEnv = sh(script: \"echo ${{ env.ist }}\", returnStdout: true).trim().split(',')[envCounter]\n                            echo \"env: ${{ env.currEnv }} & tgtSvr: $tgtServer\"\n                            \n                            existingBuildPkg = sh(returnStdout: true , script: \"ssh ec2-user@${{ env.targetserver }} 'cat /home/ec2-user/current.txt'\")\n\n                            existingBuildPkg = existingBuildPkg.replaceAll('-','_')\n                            echo \"$existingBuildPkg\"\n                            if ( \"$existingBuildPkg\" != \"${{ inputs.DEPLOY_PACKAGE }}\" ) {\n                                revisedSvrList.add( tgtServer )\n                                revisedEnvList += currEnv + \",\"\n                                //Staging deployment to the Environment                     \n                                retStatus = sh(returnStatus: true, script: \"$deployScript --deploy  --${{ env.currEnv }} $tgtServer\")\n                                \n                                //Commit deployment to the Environment\n                               deployMsgStatus += \"<tr><td> $currEnv - ${{ env.tgtServer }} </td><td> deploy - done  </td></tr>\"\n                                \n                            }\n                            else {\n                                deployMsgStatus += \"<tr><td> $currEnv - ${{ env.tgtServer }} </td><td> Build package already exists <br> Deployment, Restart skipped </td></tr>\"\n                                echo \"existing package matches with current deployment package!! Hence, skipping deployment in $tgtServer\"\n                                retStatus = 0\n                                deployStats = 0\n                            }\n                            envCounter += 1\n                        } // end for tgtServer\n                        deployMsgStatus += \"</table>\"                       \n                        echo \"revised env list: $revisedEnvList & server list: $revisedSvrList\"\n                    }\n                    \n                    echo 'Stage: Deployment Finished'"
  Restart_Target_Servers:
    name: Restart Target Servers
    runs-on: ubuntu-latest
    needs: Deployment
    steps:
    - name: checkout
      uses: actions/checkout@v3.5.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: "echo \"Stage: Restart Started\"\n                    restartMsgStatus = \"<br><table \" + table_style + \"><tr><td colspan='2'><b> === Restart stage : server wise === </b></td></tr>\" + \"<tr><td> Env - Server</td><td>Status</td></tr>\"\n                    \n                    if ( revisedEnvList != \"\" ) {                       \n                        revisedEnvList = revisedEnvList.substring(0, revisedEnvList.length() - 1)\n                        if (retStatus == 0) {                        \n                            retStatus = restartServerGroup(revisedEnvList, revisedSvrList, buildUserName)\n                        }\n                    \n                        if (retStatus != 0){\n                            currentBuild.result = 'FAILURE'\n                            emailErrorMessage = \"Error occurred in the Restart process\"\n                            error(emailErrorMessage)\n                        }\n                    }                   \n                    else {\n                        restartMsgStatus += \"<tr><td align=center colspan=2> Restart skipped </td></tr>\"\n                        echo \"No deployment!! Hence, No restart!!!\"\n                    }\n                    restartMsgStatus += \"</table>\"\n                    echo 'Stage: Restart Finished'"
